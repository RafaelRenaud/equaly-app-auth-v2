/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.br.equaly.auth.api;

import com.br.equaly.auth.model.OAuthTokenResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-02T22:41:10.381441-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "Authentication", description = "OAuth 2.0 Authentication & Authorization")
public interface OauthApi {

    default OauthApiDelegate getDelegate() {
        return new OauthApiDelegate() {};
    }

    /**
     * POST /oauth/token : User Login
     * Generate an OAuth 2.0 Access Token using Password Grant.
     *
     * @param organizationAlias Organization alias (required)
     * @param username User login (required)
     * @param password User password (required)
     * @return Access Token Response (status code 200)
     *         or Invalid request, check the payload or parameters. (status code 400)
     *         or Authentication failed. Invalid credentials. (status code 401)
     *         or User not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "login",
        summary = "User Login",
        description = "Generate an OAuth 2.0 Access Token using Password Grant.",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Access Token Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuthTokenResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request, check the payload or parameters."),
            @ApiResponse(responseCode = "401", description = "Authentication failed. Invalid credentials."),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        },
        security = {
            @SecurityRequirement(name = "oauth2_password")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/oauth/token",
        produces = { "application/json" },
        consumes = { "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<OAuthTokenResponse> login(
        @Parameter(name = "organization_alias", description = "Organization alias", required = true) @Valid @RequestParam(value = "organization_alias", required = true) String organizationAlias,
        @Parameter(name = "username", description = "User login", required = true) @Valid @RequestParam(value = "username", required = true) String username,
        @Parameter(name = "password", description = "User password", required = true) @Valid @RequestParam(value = "password", required = true) String password
    ) {
        return getDelegate().login(organizationAlias, username, password);
    }


    /**
     * POST /oauth/token/refresh : Refresh OAuth 2.0 Access Token
     * Refresh an expired access token using a refresh token.
     *
     * @param refreshToken  (required)
     * @return New Access Token Created (status code 201)
     *         or Invalid request, check the payload or parameters. (status code 400)
     *         or Authentication failed. Invalid credentials. (status code 401)
     *         or Refresh token is invalid or expired (status code 403)
     *         or Too many requests, please try again later (status code 429)
     */
    @Operation(
        operationId = "refreshToken",
        summary = "Refresh OAuth 2.0 Access Token",
        description = "Refresh an expired access token using a refresh token.",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "New Access Token Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuthTokenResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request, check the payload or parameters."),
            @ApiResponse(responseCode = "401", description = "Authentication failed. Invalid credentials."),
            @ApiResponse(responseCode = "403", description = "Refresh token is invalid or expired"),
            @ApiResponse(responseCode = "429", description = "Too many requests, please try again later")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/oauth/token/refresh",
        produces = { "application/json" },
        consumes = { "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<OAuthTokenResponse> refreshToken(
        @Parameter(name = "refresh_token", description = "", required = true) @Valid @RequestParam(value = "refresh_token", required = true) String refreshToken
    ) {
        return getDelegate().refreshToken(refreshToken);
    }

}
