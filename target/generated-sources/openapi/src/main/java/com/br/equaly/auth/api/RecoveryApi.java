/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.br.equaly.auth.api;

import com.br.equaly.auth.model.AccountActivationRequest;
import com.br.equaly.auth.model.RecoveryRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-02T22:41:10.381441-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "AccountRecovery", description = "User account recovery methods")
public interface RecoveryApi {

    default RecoveryApiDelegate getDelegate() {
        return new RecoveryApiDelegate() {};
    }

    /**
     * PATCH /recovery/{recovery_id} : Recover Account
     * Recover an account by setting a new password using a recovery code.
     *
     * @param recoveryId Account Recovery Code (required)
     * @param accountActivationRequest  (optional)
     * @return Account recovered successfully (status code 204)
     *         or Invalid request, check the payload or parameters. (status code 400)
     *         or Authentication failed. Invalid credentials. (status code 401)
     *         or A conflict occurred (e.g., resource already exists). (status code 409)
     *         or Recovery code not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "recoverAccount",
        summary = "Recover Account",
        description = "Recover an account by setting a new password using a recovery code.",
        tags = { "AccountRecovery" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Account recovered successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request, check the payload or parameters."),
            @ApiResponse(responseCode = "401", description = "Authentication failed. Invalid credentials."),
            @ApiResponse(responseCode = "409", description = "A conflict occurred (e.g., resource already exists)."),
            @ApiResponse(responseCode = "404", description = "Recovery code not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/recovery/{recovery_id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> recoverAccount(
        @Parameter(name = "recovery_id", description = "Account Recovery Code", required = true, in = ParameterIn.PATH) @PathVariable("recovery_id") String recoveryId,
        @Parameter(name = "AccountActivationRequest", description = "") @Valid @RequestBody(required = false) AccountActivationRequest accountActivationRequest
    ) {
        return getDelegate().recoverAccount(recoveryId, accountActivationRequest);
    }


    /**
     * POST /recovery : Generate Recovery Code
     * Generate and send a recovery account code (RAC) to the user&#39;s email.
     *
     * @param recoveryRequest  (optional)
     * @return Request has been accepted and will be processed. (status code 202)
     *         or Invalid request, check the payload or parameters. (status code 400)
     *         or Authentication failed. Invalid credentials. (status code 401)
     *         or User not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "recovery",
        summary = "Generate Recovery Code",
        description = "Generate and send a recovery account code (RAC) to the user's email.",
        tags = { "AccountRecovery" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Request has been accepted and will be processed."),
            @ApiResponse(responseCode = "400", description = "Invalid request, check the payload or parameters."),
            @ApiResponse(responseCode = "401", description = "Authentication failed. Invalid credentials."),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/recovery",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> recovery(
        @Parameter(name = "RecoveryRequest", description = "") @Valid @RequestBody(required = false) RecoveryRequest recoveryRequest
    ) {
        return getDelegate().recovery(recoveryRequest);
    }

}
