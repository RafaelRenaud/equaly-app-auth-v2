openapi: "3.0.3"
info:
  title: eQualy Authentication Service
  description: "Service responsible for managing authentication and authorization of users."
  version: 2.0.0
  contact:
    email: renaudrafa@hotmail.com
    name: Rafael Renaud Miranda

tags:
  - name: Authentication
    description: "OAuth 2.0 Authentication & Authorization"
  - name: AccountRecovery
    description: "User account recovery methods"
  - name: Company
    description: "User companies"

paths:
  /user/{user_id}/companies:
    get:
      description: "List User Companies for Multicorp Login"
      summary: "Lists User Companies"
      operationId: getCompanies
      x-spring-paginated: true
      tags:
        - Company
      parameters:
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/alias"
        - $ref: "#/components/parameters/document"
        - $ref: "#/components/parameters/status"
      responses:
        "200":
          description: "Companies Searched Successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompaniesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"
  /oauth/token:
    post:
      description: "Generate an OAuth 2.0 Access Token using Password Grant."
      summary: "User Login"
      operationId: login
      tags:
        - Authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "Access Token Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthTokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"
  /oauth/token/refresh:
    post:
      description: "Refresh an expired access token using a refresh token."
      summary: "Refresh OAuth 2.0 Access Token"
      operationId: refreshToken
      tags:
        - Authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/OAuthRefreshTokenAndValidateRequest"
      responses:
        "201":
          description: "New Access Token Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthTokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: "Refresh token is invalid or expired"
        "429":
          description: "Too many requests, please try again later"
      security:
        - bearerAuth: []
  /oauth/token/validate:
    get:
      description: "Validate a JWT Token"
      summary: "Validate a JWT Token"
      operationId: validateToken
      tags:
        - Authentication
      responses:
        "204":
          description: "Token Validated Successfully"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: "Refresh token is invalid or expired"
        "429":
          description: "Too many requests, please try again later"
      security:
        - bearerAuth: []

  /recovery:
    post:
      description: "Generate and send a recovery account code (RAC) to the user's email."
      summary: "Generate Recovery Code"
      operationId: recovery
      tags:
        - AccountRecovery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecoveryRequest"
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

  /recovery/{recovery_id}:
    patch:
      description: "Recover an account by setting a new password using a recovery code."
      summary: "Recover Account"
      operationId: recoverAccount
      tags:
        - AccountRecovery
      parameters:
        - $ref: "#/components/parameters/RecoveryToken"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountActivationRequest"
      responses:
        "204":
          description: "Account recovered successfully"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Conflict"
        "404":
          description: "Recovery code not found"
        "500":
          description: "Internal server error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      properties:
        companyId:
          type: integer
          description: "Company ID"
          example: 1
        login:
          type: string
          description: "User login"
          example: "equalyUser"
        email:
          type: string
          description: "User email"
          example: "equalyuser@equaly.com.br"
          format: email
        document:
          type: string
          description: "User document"
          example: "50598754372"
        password:
          type: string
          format: password
          description: "User password"
        isAdmin:
          type: boolean
          description: "System Administrator Indicator"
      required: [password, isAdmin]
    OAuthRefreshTokenAndValidateRequest:
      type: object
      properties:
        refresh_token:
          type: string
          example: "ZTlhMzY5..."
      required: [refresh_token]

    OAuthTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: "OAuth 2.0 Access Token"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMTIzNDU2Iiwicm9sZSI6IkFkbWluIiwidGVuYW50X2NvZGVzIjoiMTIzIiwiaWF0IjoxNTE2MjM5MDIwfQ.C_nNejjfdD2W4Dk1OeK4mJjXX-oLpgA5rmcdaVQw"
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          example: 14400
        refresh_token:
          type: string
          description: "Token used to renew the access token"
          example: "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6"
    CompaniesResponse:
      type: object
      properties:
        companies:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Company"
        pageable:
          $ref: "#/components/schemas/PageableTemplate"
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP Status Code
          example: 422
        status:
          type: string
          description: HTTP Status Type
          example: "Unrpocessable Entity"
        message:
          type: string
          description: HTTP Status Message
          example: "O campo 'email' é obrigatório."
        timestamp:
          type: string
          description: Request Timestamp
          example: "2025-03-29T12:00:00.000+00:00"
    PageableTemplate:
      type: object
      properties:
        size:
          type: integer
          description: Quantidade de elementos por página
          example: 20
        totalElements:
          type: integer
          description: Total de elementos na busca
          example: 50
        totalPages:
          type: integer
          description: Total de páginas disponíveis
          example: 3
        number:
          type: integer
          description: Número da página atual
          example: 0
    Company:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Company ID
        name:
          type: string
          description: Company Name
          example: eQualy
        alias:
          type: string
          description: Company Alias
          example: equaly
        tradingName:
          type: string
          description: Company Trading Name
          example: eQualy Quality Service SA
        displayName:
          type: string
          description: Company Display Name
          example: eQualy Quality Service
        document:
          type: string
          description: Company CNPJ
          example: 12918273000123
        status:
          type: string
          description: Company Status
          example: ACTIVE
        logoUri:
          type: string
          description: Logo Uri
          example: https://s3.aws.equaly.com.br/blob/v1/logo.png
    RecoveryRequest:
      type: object
      properties:
        companyAlias:
          type: string
          description: "Alias of the company the user belongs to."
          example: "equaly"
        login:
          type: string
          example: "login123"
      required: [companyAlias, login]

    AccountActivationRequest:
      type: object
      properties:
        rac:
          type: string
          description: RAC Code
          example: 123456
        email:
          type: string
          description: User Email
          format: email
          example: "user@example.com"
        newPassword:
          type: string
          format: password
          description: "The new password to be set for the account."
      required: [rac, email, newPassword]

  parameters:
    OrganizationAlias:
      name: "organizationAlias"
      in: path
      required: true
      description: "Alias of the organization"
      schema:
        type: string
    RecoveryToken:
      name: "recovery_id"
      in: path
      required: true
      description: "Account Recovery Token"
      schema:
        type: string
    user_id:
      name: "user_id"
      in: path
      required: true
      description: "User Document or Email"
      schema:
        type: string
    alias:
      name: "alias"
      in: query
      required: false
      explode: false
      description: "Company Alias Filter"
      schema:
        type: string
        example: "equal"
    document:
      name: "document"
      in: query
      required: false
      explode: false
      description: "Company Document Filter"
      schema:
        type: string
        example: "505987"
    status:
      name: "status"
      in: query
      required: false
      explode: false
      description: "Company Status Filter"
      schema:
        type: string
        example: "INACTIVE"
  responses:
    Accepted:
      description: "Request has been accepted and will be processed."
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: "Authentication failed. Invalid credentials."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Conflict:
      description: "A conflict occurred (e.g., resource already exists)."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: "The requested resource was not found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: "Internal server error."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    TooManyRequests:
      description: "Too many requests, please try again later."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"